import csv
import random
import time

def read_distance_matrix_from_csv(file_path):
    distance_matrix = []
    with open(file_path, 'r') as csv_file:
        csv_reader = csv.reader(csv_file)
        for row in csv_reader:
            row = [int(cell) for cell in row]
            distance_matrix.append(row)
    return distance_matrix

def nearest_neighbor_tsp(distance_matrix):
    num_cities = len(distance_matrix)
    unvisited_cities = list(range(num_cities))
    path = [random.choice(unvisited_cities)]
    unvisited_cities.remove(path[0])

    while unvisited_cities:
        current_city = path[-1]
        nearest_city = min(unvisited_cities, key=lambda city: distance_matrix[current_city][city])
        path.append(nearest_city)
        unvisited_cities.remove(nearest_city)

    # Return to the starting city to complete the circuit
    path.append(path[0])
    return path

if __name__ == "__main__":
    # Use "500.csv" as the file name
    csv_file_path = '500.csv'

    # Read the distance matrix from the CSV file
    distance_matrix = read_distance_matrix_from_csv(csv_file_path)

    start_time = time.time()

    # Solve TSP using the Nearest Neighbor algorithm
    tsp_path = nearest_neighbor_tsp(distance_matrix)

    end_time = time.time()
    execution_time = end_time - start_time

    # Print the TSP path and execution time
    print(f"Optimal TSP Path: {tsp_path}")
    print(f"Execution Time: {execution_time:.2f} seconds")
