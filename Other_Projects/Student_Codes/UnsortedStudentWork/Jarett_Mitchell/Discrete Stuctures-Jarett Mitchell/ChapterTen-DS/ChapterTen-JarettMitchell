import pandas as pd
import numpy as np
from geopy.distance import distance
import time 

# Load the data
data = pd.read_csv('C:\\Users\\pixel\\Git\\SwosuCsPythonExamples\\Student_Codes\\Jarett_Mitchell\\Discrete Stuctures-Jarett Mitchell\\ChapterTen-DS\\us-state-capitals.csv')#change path to us-state-capitals.csv location
# Calculate the pairwise distances
distances = np.zeros((50, 50))
for i in range(50):
    #print(f"This is i {i}")
    for j in range(i+1, 50):
        #print(f"This is j {j}")
        distances[i][j] = distances[j][i] = distance(
            (data['latitude'][i], data['longitude'][i]), 
            (data['latitude'][j], data['longitude'][j])
        ).miles

# Define the nearest neighbor algorithm
def nearest_neighbor(distances, start):
    n = distances.shape[0]
    visited = [start]
    total_distance = 0
    current_city = start
    for i in range(n-1):
        nearest_distance = float('inf')
        nearest_city = None
        for j in range(n):
            if j not in visited:
                if distances[current_city][j] < nearest_distance:
                    nearest_distance = distances[current_city][j]
                    nearest_city = j
        total_distance += nearest_distance
        visited.append(nearest_city)
        current_city = nearest_city
    total_distance += distances[current_city][start]
    visited.append(start)
    return visited, total_distance

if __name__ == '__main__':

    #ask user if they want to see the data
    answer = input("Would you like to see the data used for the state capitals? (y/n): ")
    if answer == "y":
        print(data)

    # Find the shortest path
    shortest_path, shortest_distance = nearest_neighbor(distances, 0)
    print('Shortest path:', shortest_path)
    print('Total distance (miles):', f"{shortest_distance:.2f}")

    #print time 
    print(f"Time to run: {time.process_time():.2f} Seconds")